openapi: 3.0.0
servers:
  - url: 'https://localhost:8080/api'
info:
  version: 1.0.0
  title: OnBoarding Service Deutschland
  description: |
    The Onboarding Service is micro blogging website to ease the onboarding of people new to the Germany.

    The REST API provides CRUD operations for the data / blogs used with the web application.

tags:
  - name: Admin
    description: Admin endpoints
  - name: User
    description: User endpoints
paths:
  /v1/user/blogs:
    post:
      tags:
        - User
      summary: Get all blogs
      description: >
        Retrieves the list of saved blogs.
      responses:
        '200':
          description: List of blogs was successfully retrieved.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BlogList"
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /v1/admin/blog/add:
    post:
      tags:
        - Admin
      summary: Get consumer tenants
      description: >
        Retrieves the list of known consumer tenants.
      responses:
        '200':
          description: List of consumer tenants was successfully returned.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BlogList"
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /v1/admin/blog/update:
    get:
      tags:
        - Admin
      summary: Get producer tenants
      description: >
        Retrieves the list of known producer tenants.
      responses:
        '200':
          description: List of producer tenants was successfully returned.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BlogList"
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /v1/admin/blog/delete:
    get:
      tags:
        - Admin
      summary: Get producer tenants
      description: >
        Retrieves the list of known producer tenants.
      responses:
        '200':
          description: List of producer tenants was successfully returned.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BlogList"
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /v1/users:
    get:
      tags:
        - Get all users
      summary: Get all users with permissions
      description: >
        Retrieves the list of users and their permissions.
      parameters:
        - $ref: '#/components/parameters/consumerTenantHeader'
      responses:
        '200':
          description: List of users was successfully returned.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetSubscriptionList"
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'

    post:
      tags:
        - Subscriptions
      summary: Creates new subscription
      description: >
        Creates a new subscription with the provided configuration.
      parameters:
        - $ref: '#/components/parameters/consumerTenantHeader'
      requestBody:
        description: |
          Subscription configuration
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSubscription'
      responses:
        '201':
          description: Subscription was created.
          headers:
            Location:
              $ref: '#/components/headers/Location'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /v1/user/{userId}:
    get:
      tags:
        - Subscriptions
      summary: Get subscription details
      description: >
        Retrieves configuration of given subscription.
      parameters:
        - $ref: '#/components/parameters/subscriptionId'
        - $ref: '#/components/parameters/consumerTenantHeader'
      responses:
        '200':
          description: Subscription was successfully returned.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetSubscription"
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - Subscriptions
      summary: Update subscription
      description: >
        Updates configuration of given subscription.
      parameters:
        - $ref: '#/components/parameters/subscriptionId'
        - $ref: '#/components/parameters/consumerTenantHeader'
      requestBody:
        description: |
          Subscription configuration
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSubscription'
      responses:
        '204':
          description: Subscription was updated.
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - Subscriptions
      summary: Delete subscription
      description: >
        Deletes registered subscription with given id.
      parameters:
        - $ref: '#/components/parameters/subscriptionId'
        - $ref: '#/components/parameters/consumerTenantHeader'
      responses:
        '204':
          description: Subscrition was deleted.
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /v1/notificationChannels:
    get:
      tags:
        - NotificationChannels
      summary: Get notification channels
      description: >
        Retrieves the list of registered notification channels.
      parameters:
        - $ref: '#/components/parameters/consumerTenantHeader'
      responses:
        '200':
          description: List of notification channels was successfully returned.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetNotificationChannelList"
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'

    post:
      tags:
        - NotificationChannels
      summary: Creates new notification channel
      description: >
        Creates a new notification channel with the provided configuration.
      parameters:
        - $ref: '#/components/parameters/consumerTenantHeader'
      requestBody:
        description: |
          Notification channel configuration
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateNotificationChannel'
      responses:
        '201':
          description: Notification channel was created.
          headers:
            Location:
              $ref: '#/components/headers/Location'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /v1/notificationChannels/{channelId}:
    get:
      tags:
        - NotificationChannels
      summary: Get notification channel details
      description: >
        Retrieves configuration of given notification channel.
      parameters:
        - $ref: '#/components/parameters/channelId'
        - $ref: '#/components/parameters/consumerTenantHeader'
      responses:
        '200':
          description: Notification channel was successfully returned.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetNotificationChannel"
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'

    put:
      tags:
        - NotificationChannels
      summary: Update notification channel
      description: >
        Updates configuration of given notification channel.
      parameters:
        - $ref: '#/components/parameters/channelId'
        - $ref: '#/components/parameters/consumerTenantHeader'
      requestBody:
        description: |
          Notification channel configuration
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateNotificationChannel'
      responses:
        '204':
          description: Notification channel was updated.
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - NotificationChannels
      summary: Delete notification channel
      description: >
        Deletes registered notification channel with given id.
      parameters:
        - $ref: '#/components/parameters/channelId'
        - $ref: '#/components/parameters/consumerTenantHeader'
      responses:
        '204':
          description: Subscrition was deleted.
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'


components:

  headers:
    Location:
      description: URL of the created resource.
      schema:
        type: string

  parameters:
    subscriptionId:
      in: path
      name: subscriptionId
      required: true
      schema:
        type: string
      description: Subscription id
    channelId:
      in: path
      name: channelId
      required: true
      schema:
        type: string
      description: Notification channel id
    consumerTenantHeader:
      name: X-CONSUMER-TENANT
      in: header
      description: Tenant identifier used to set an explicit tenant context for the request
      required: true
      schema:
        type: string

  responses:
    BadRequest:
      description: The received request is malformed.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    InternalServerError:
      description: An internal server error occured.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    NotFound:
      description: The specified resource was not found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    Unauthorized:
      description: Authentication of the request failed.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    Forbidden:
      description: The request is not authorized to access the resource.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    Conflict:
      description: Deletion request did not match the state of coupling resource.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

  schemas:

    CreateSubscription:
      type: object
      required:
        - name
        - producerTenant
        - notificationChannel
      properties:
        name:
          type: string
        producerTenant:
          type: string
        notificationChannel:
          type: string
        matchFilters:
          type: object
          additionalProperties:
            type: string

    GetSubscription:
      allOf:
        - type: object
          required:
            - id
            - status
          properties:
            id:
              type: string
            status:
              type: string
            createdAt:
              type: string
            updatedAt:
              type: string
        - $ref: '#/components/schemas/CreateSubscription'

    GetSubscriptionList:
      type: object
      required:
        - subscriptions
      properties:
        subscriptions:
          type: array
          items:
            $ref: '#/components/schemas/GetSubscription'

    GetAdminSubscription:
      allOf:
        - type: object
          required:
            - consumerTenant
          properties:
            consumerTenant:
              type: string
        - $ref: '#/components/schemas/GetSubscription'

    NotificationChannelType:
      type: string
      enum: [ iot-insights, azure-blob-store, http-post ]

    CreateNotificationChannel:
      type: object
      required:
        - name
        - type
        - properties
      properties:
        name:
          type: string
        type:
          $ref: '#/components/schemas/NotificationChannelType'
        properties:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/NotificationChannelProperty'

    NotificationChannelProperty:
      type: object
      required:
        - value
        - isSecret
      properties:
        value:
          type: string
        isSecret:
          type: boolean

    GetNotificationChannel:
      allOf:
        - type: object
          required:
            - id
          properties:
            id:
              type: string
            createdAt:
              type: string
            updatedAt:
              type: string
        - $ref: '#/components/schemas/CreateNotificationChannel'

    GetNotificationChannelList:
      type: object
      required:
        - notificationChannels
      properties:
        notificationChannels:
          type: array
          items:
            $ref: '#/components/schemas/GetNotificationChannel'

    GetAdminNotificationChannel:
      allOf:
        - type: object
          required:
            - consumerTenant
          properties:
            consumerTenant:
              type: string
        - $ref: '#/components/schemas/GetNotificationChannel'

    Blog:
      type: object
      required:
        - id
        - description
        - blogRef
        - notificationChannels
      properties:
        id:
          type: string
        description:
          type: string
        subscriptions:
          type: array
          items:
            $ref: '#/components/schemas/GetAdminSubscription'
        notificationChannels:
          type: array
          items:
            $ref: '#/components/schemas/GetAdminNotificationChannel'

    BlogList:
      type: object
      required:
        - blogs
      properties:
        blog:
          type: array
          items:
            $ref: '#/components/schemas/Blog'

    ErrorResponse:
      description: Error response according to RFC 7807 https://tools.ietf.org/html/rfc7807
      type: object
      properties:
        type:
          type: string
          format: uri
          description: |
            A URI that identifies the problem type.  When dereferenced,
            it SHOULD provide human-readable documentation for the problem type
            (e.g., using HTML).
        title:
          type: string
          description: |
            A short, summary of the problem type. Written in english and readable
            for engineers (usually not suited for non technical stakeholders and
            not localized); example: Service Unavailable
        status:
          type: integer
          format: int32
          description: |
            The HTTP status code generated by the origin server for this occurrence
            of the problem.
          minimum: 100
          maximum: 600
          exclusiveMaximum: true
        detail:
          type: string
          description: |
            A human readable explanation specific to this occurrence of the
            problem.
        instance:
          type: string
          format: uri
          description: |
